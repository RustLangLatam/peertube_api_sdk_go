/*
PeerTube

Testing AbusesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk

import (
	"context"
	openapiclient "github.com/RustLangLatam/peertube_api_sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_AbusesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AbusesAPIService ApiV1AbusesAbuseIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var abuseId int32

		httpRes, err := apiClient.AbusesAPI.ApiV1AbusesAbuseIdDelete(context.Background(), abuseId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService ApiV1AbusesAbuseIdMessagesAbuseMessageIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var abuseId int32
		var abuseMessageId int32

		httpRes, err := apiClient.AbusesAPI.ApiV1AbusesAbuseIdMessagesAbuseMessageIdDelete(context.Background(), abuseId, abuseMessageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService ApiV1AbusesAbuseIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var abuseId int32

		resp, httpRes, err := apiClient.AbusesAPI.ApiV1AbusesAbuseIdMessagesGet(context.Background(), abuseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService ApiV1AbusesAbuseIdMessagesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var abuseId int32

		httpRes, err := apiClient.AbusesAPI.ApiV1AbusesAbuseIdMessagesPost(context.Background(), abuseId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService ApiV1AbusesAbuseIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var abuseId int32

		httpRes, err := apiClient.AbusesAPI.ApiV1AbusesAbuseIdPut(context.Background(), abuseId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService ApiV1AbusesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AbusesAPI.ApiV1AbusesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService GetAbuses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AbusesAPI.GetAbuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbusesAPIService GetMyAbuses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AbusesAPI.GetMyAbuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
