/*
PeerTube

Testing RunnerJobsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk_go

import (
	"context"
	"github.com/RustLangLatam/peertube_api_sdk_go/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_go_RunnerJobsAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDAbortPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDAbortPost(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDAcceptPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		resp, httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDAcceptPost(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDCancelGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDCancelGet(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDDelete(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDErrorPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDErrorPost(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDSuccessPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDSuccessPost(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsJobUUIDUpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobUUID string

		httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsJobUUIDUpdatePost(context.Background(), jobUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RunnerJobsAPIService ApiV1RunnersJobsRequestPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RunnerJobsAPI.ApiV1RunnersJobsRequestPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
