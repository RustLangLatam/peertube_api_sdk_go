/*
PeerTube

Testing VideoAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk_go

import (
	"context"
	"github.com/RustLangLatam/peertube_api_sdk_go/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_go_VideoAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test VideoAPIService AddView", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		httpRes, err := apiClient.VideoAPI.AddView(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService ApiV1VideosIdStudioEditPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		httpRes, err := apiClient.VideoAPI.ApiV1VideosIdStudioEditPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService ApiV1VideosIdWatchingPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		httpRes, err := apiClient.VideoAPI.ApiV1VideosIdWatchingPut(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService DelVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		httpRes, err := apiClient.VideoAPI.DelVideo(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService DeleteVideoSourceFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		httpRes, err := apiClient.VideoAPI.DeleteVideoSourceFile(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.GetCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetLanguages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.GetLanguages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetLicences", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.GetLicences(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		resp, httpRes, err := apiClient.VideoAPI.GetVideo(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetVideoDesc", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		resp, httpRes, err := apiClient.VideoAPI.GetVideoDesc(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetVideoPrivacyPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.GetVideoPrivacyPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetVideoSource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		resp, httpRes, err := apiClient.VideoAPI.GetVideoSource(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService GetVideos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.GetVideos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService ListVideoStoryboards", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		resp, httpRes, err := apiClient.VideoAPI.ListVideoStoryboards(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService PutVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		httpRes, err := apiClient.VideoAPI.PutVideo(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService RequestVideoToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id ApiV1VideosOwnershipIdAcceptPostIdParameter

		resp, httpRes, err := apiClient.VideoAPI.RequestVideoToken(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService UploadLegacy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.UploadLegacy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService UploadResumable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoAPI.UploadResumable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService UploadResumableCancel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.VideoAPI.UploadResumableCancel(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoAPIService UploadResumableInit", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.VideoAPI.UploadResumableInit(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
