/*
PeerTube

Testing InstanceFollowsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk_go

import (
	"context"
	"github.com/RustLangLatam/peertube_api_sdk_go/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_go_InstanceFollowsAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowersNameWithHostAcceptPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameWithHost string

		httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowersNameWithHostAcceptPost(context.Background(), nameWithHost).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowersNameWithHostDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameWithHost string

		httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowersNameWithHostDelete(context.Background(), nameWithHost).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowersNameWithHostRejectPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameWithHost string

		httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowersNameWithHostRejectPost(context.Background(), nameWithHost).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowingGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowingGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowingHostOrHandleDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hostOrHandle string

		httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowingHostOrHandleDelete(context.Background(), hostOrHandle).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceFollowsAPIService ApiV1ServerFollowingPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.InstanceFollowsAPI.ApiV1ServerFollowingPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
