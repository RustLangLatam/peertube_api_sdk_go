/*
PeerTube

Testing VideoChannelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk

import (
	"context"
	openapiclient "github.com/RustLangLatam/peertube_api_sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_VideoChannelsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VideoChannelsAPIService AddVideoChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoChannelsAPI.AddVideoChannel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService ApiV1VideoChannelsChannelHandleAvatarDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		httpRes, err := apiClient.VideoChannelsAPI.ApiV1VideoChannelsChannelHandleAvatarDelete(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService ApiV1VideoChannelsChannelHandleAvatarPickPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		resp, httpRes, err := apiClient.VideoChannelsAPI.ApiV1VideoChannelsChannelHandleAvatarPickPost(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService ApiV1VideoChannelsChannelHandleBannerDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		httpRes, err := apiClient.VideoChannelsAPI.ApiV1VideoChannelsChannelHandleBannerDelete(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService ApiV1VideoChannelsChannelHandleBannerPickPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		resp, httpRes, err := apiClient.VideoChannelsAPI.ApiV1VideoChannelsChannelHandleBannerPickPost(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService ApiV1VideoChannelsChannelHandleImportVideosPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		httpRes, err := apiClient.VideoChannelsAPI.ApiV1VideoChannelsChannelHandleImportVideosPost(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService ApiV1VideoChannelsChannelHandleVideoPlaylistsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		resp, httpRes, err := apiClient.VideoChannelsAPI.ApiV1VideoChannelsChannelHandleVideoPlaylistsGet(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService DelVideoChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		httpRes, err := apiClient.VideoChannelsAPI.DelVideoChannel(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService GetVideoChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		resp, httpRes, err := apiClient.VideoChannelsAPI.GetVideoChannel(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService GetVideoChannelFollowers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		resp, httpRes, err := apiClient.VideoChannelsAPI.GetVideoChannelFollowers(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService GetVideoChannelVideos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		resp, httpRes, err := apiClient.VideoChannelsAPI.GetVideoChannelVideos(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService GetVideoChannels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoChannelsAPI.GetVideoChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoChannelsAPIService PutVideoChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelHandle string

		httpRes, err := apiClient.VideoChannelsAPI.PutVideoChannel(context.Background(), channelHandle).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
