/*
PeerTube

Testing WatchedWordsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk

import (
	"context"
	openapiclient "github.com/RustLangLatam/peertube_api_sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_WatchedWordsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsAccountsAccountNameListsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountName string

		resp, httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsAccountsAccountNameListsGet(context.Background(), accountName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsAccountsAccountNameListsListIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountName string
		var listId string

		httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsAccountsAccountNameListsListIdDelete(context.Background(), accountName, listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsAccountsAccountNameListsListIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountName string
		var listId string

		httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsAccountsAccountNameListsListIdPut(context.Background(), accountName, listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsAccountsAccountNameListsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountName string

		resp, httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsAccountsAccountNameListsPost(context.Background(), accountName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsServerListsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsServerListsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsServerListsListIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId string

		httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsServerListsListIdDelete(context.Background(), listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsServerListsListIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId string

		httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsServerListsListIdPut(context.Background(), listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatchedWordsAPIService ApiV1WatchedWordsServerListsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WatchedWordsAPI.ApiV1WatchedWordsServerListsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
