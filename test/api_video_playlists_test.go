/*
PeerTube

Testing VideoPlaylistsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk_go

import (
	"context"
	"github.com/RustLangLatam/peertube_api_sdk_go/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_go_VideoPlaylistsAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test VideoPlaylistsAPIService AddPlaylist", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.AddPlaylist(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService AddVideoPlaylistVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.AddVideoPlaylistVideo(context.Background(), playlistId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService ApiV1UsersMeVideoPlaylistsVideosExistGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.ApiV1UsersMeVideoPlaylistsVideosExistGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService ApiV1VideoPlaylistsPlaylistIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32

		httpRes, err := apiClient.VideoPlaylistsAPI.ApiV1VideoPlaylistsPlaylistIdDelete(context.Background(), playlistId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService ApiV1VideoPlaylistsPlaylistIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.ApiV1VideoPlaylistsPlaylistIdGet(context.Background(), playlistId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService ApiV1VideoPlaylistsPlaylistIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32

		httpRes, err := apiClient.VideoPlaylistsAPI.ApiV1VideoPlaylistsPlaylistIdPut(context.Background(), playlistId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService DelVideoPlaylistVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32
		var playlistElementId int32

		httpRes, err := apiClient.VideoPlaylistsAPI.DelVideoPlaylistVideo(context.Background(), playlistId, playlistElementId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService GetPlaylistPrivacyPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.GetPlaylistPrivacyPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService GetPlaylists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.GetPlaylists(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService GetVideoPlaylistVideos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32

		resp, httpRes, err := apiClient.VideoPlaylistsAPI.GetVideoPlaylistVideos(context.Background(), playlistId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService PutVideoPlaylistVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32
		var playlistElementId int32

		httpRes, err := apiClient.VideoPlaylistsAPI.PutVideoPlaylistVideo(context.Background(), playlistId, playlistElementId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VideoPlaylistsAPIService ReorderVideoPlaylist", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var playlistId int32

		httpRes, err := apiClient.VideoPlaylistsAPI.ReorderVideoPlaylist(context.Background(), playlistId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
