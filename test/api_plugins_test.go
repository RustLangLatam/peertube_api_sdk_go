/*
PeerTube

Testing PluginsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package peertube_api_sdk_go

import (
	"context"
	"github.com/RustLangLatam/peertube_api_sdk_go/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_peertube_api_sdk_go_PluginsAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test PluginsAPIService AddPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.AddPlugin(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService ApiV1PluginsNpmNamePublicSettingsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var npmName string

		resp, httpRes, err := apiClient.PluginsAPI.ApiV1PluginsNpmNamePublicSettingsGet(context.Background(), npmName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService ApiV1PluginsNpmNameRegisteredSettingsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var npmName string

		resp, httpRes, err := apiClient.PluginsAPI.ApiV1PluginsNpmNameRegisteredSettingsGet(context.Background(), npmName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService ApiV1PluginsNpmNameSettingsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var npmName string

		httpRes, err := apiClient.PluginsAPI.ApiV1PluginsNpmNameSettingsPut(context.Background(), npmName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetAvailablePlugins", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetAvailablePlugins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var npmName string

		resp, httpRes, err := apiClient.PluginsAPI.GetPlugin(context.Background(), npmName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPlugins", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPlugins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService UninstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.UninstallPlugin(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService UpdatePlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.UpdatePlugin(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
